import streamlit as st
import time
import json
import os
from PIL import Image
import base64
from io import BytesIO

# –ò–º–ø–æ—Ä—Ç –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from game_engine.game_controller import GameController
from ml_system.player_analyzer import PlayerAnalyzer
from ml_system.level_generator import LevelGenerator
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title=config.GAME_TITLE,
    page_icon="‚öîÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã
st.title(config.GAME_TITLE)
st.markdown("---")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–π—Ç–æ–≤
@st.cache_resource
def load_sprites():
    sprites = {}
    sprite_sizes = {
        "coin": (25, 25),
        "health_potion": (30, 30),
        "key": (25, 25),
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–π—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50x50
    }
    
    try:
        for sprite_name, sprite_path in config.PATHS["sprites"].items():
            try:
                image = Image.open(sprite_path)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if sprite_name in sprite_sizes:
                    size = sprite_sizes[sprite_name]
                else:
                    size = (50, 50)
                sprites[sprite_name] = image.resize(size)
            except FileNotFoundError:
                st.warning(f"–°–ø—Ä–∞–π—Ç {sprite_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {sprite_path}")
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å–ø—Ä–∞–π—Ç–∞
                if sprite_name in sprite_sizes:
                    size = sprite_sizes[sprite_name]
                else:
                    size = (50, 50)
                image = Image.new('RGBA', size, (255, 0, 0, 128))
                sprites[sprite_name] = image
        return sprites
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–π—Ç–æ–≤: {e}")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@st.cache_resource
def load_backgrounds():
    backgrounds = {}
    try:
        for bg_name, bg_path in config.PATHS["backgrounds"].items():
            try:
                image = Image.open(bg_path)
                backgrounds[bg_name] = image
            except FileNotFoundError:
                st.warning(f"–§–æ–Ω {bg_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {bg_path}")
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ñ–æ–Ω–∞
                image = Image.new('RGB', (800, 500), (100, 100, 150))
                backgrounds[bg_name] = image
        return backgrounds
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–æ–≤: {e}")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64 –¥–ª—è HTML
def get_image_base64(img):
    buffered = BytesIO()
    img.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∏ ML-—Å–∏—Å—Ç–µ–º
if 'game_controller' not in st.session_state:
    st.session_state.game_controller = GameController()
if 'player_analyzer' not in st.session_state:
    st.session_state.player_analyzer = PlayerAnalyzer(log_file=config.PATHS["player_actions"])
if 'level_generator' not in st.session_state:
    st.session_state.level_generator = LevelGenerator()
if 'sprites' not in st.session_state:
    st.session_state.sprites = load_sprites()
if 'backgrounds' not in st.session_state:
    st.session_state.backgrounds = load_backgrounds()

# –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
game_container = st.empty()

# Sidebar –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
with st.sidebar:
    st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    if st.button("–ù–æ–≤–∞—è –∏–≥—Ä–∞"):
        st.session_state.game_controller.initialize_game()
        st.experimental_rerun()
    
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É"):
        st.session_state.game_controller.save_game_state()
        st.success("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω—è")
    difficulty_options = ["easy", "medium", "hard"]
    selected_difficulty = st.selectbox("–°–ª–æ–∂–Ω–æ—Å—Ç—å:", difficulty_options, index=difficulty_options.index(st.session_state.game_controller.current_difficulty))
    
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"):
        level_data = st.session_state.level_generator.generate_level(selected_difficulty)
        level_data["level_id"] = f"level_{st.session_state.game_controller.level_number}"
        level_data["difficulty"] = selected_difficulty
        st.session_state.game_controller.load_level(level_data)
        st.experimental_rerun()
    
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ")
    controller = st.session_state.game_controller
    if controller.player:
        st.write(f"–ó–¥–æ—Ä–æ–≤—å–µ: {controller.player.health}/{controller.player.max_health}")
        st.write(f"–ú–æ–Ω–µ—Ç—ã: {controller.player.coins}")
        st.write(f"–û—á–∫–∏: {controller.score}")
        st.write(f"–ñ–∏–∑–Ω–∏: {controller.lives}")
        st.write(f"–£—Ä–æ–≤–µ–Ω—å: {controller.level_number}")
        st.write(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {controller.current_difficulty}")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∑–¥–æ—Ä–æ–≤—å—è
        st.progress(controller.player.health / controller.player.max_health)
    
    st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    st.write("‚¨ÖÔ∏è / ‚û°Ô∏è - –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ")
    st.write("‚¨ÜÔ∏è - –ü—Ä—ã–∂–æ–∫ (–¥–≤–∞–∂–¥—ã –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ –ø—Ä—ã–∂–∫–∞)")
    st.write("Space - –ê—Ç–∞–∫–∞")
    st.write("Shift - –†—ã–≤–æ–∫")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
control_cols = st.columns([1, 1, 1, 1, 1])
with control_cols[0]:
    if st.button("‚¨ÖÔ∏è", key="mobile_left_btn"):
        st.session_state.game_controller.player.move_left()
        st.session_state.player_analyzer.log_action("move_left", st.session_state.game_controller.player, st.session_state.game_controller.level)
with control_cols[1]:
    if st.button("‚û°Ô∏è", key="mobile_right_btn"):
        st.session_state.game_controller.player.move_right()
        st.session_state.player_analyzer.log_action("move_right", st.session_state.game_controller.player, st.session_state.game_controller.level)
with control_cols[2]:
    if st.button("‚¨ÜÔ∏è", key="mobile_jump_btn"):
        if st.session_state.game_controller.player.jump():
            st.session_state.player_analyzer.log_action("jump", st.session_state.game_controller.player, st.session_state.game_controller.level)
with control_cols[3]:
    if st.button("‚öîÔ∏è", key="mobile_attack_btn"):
        if st.session_state.game_controller.player.attack():
            st.session_state.player_analyzer.log_action("attack", st.session_state.game_controller.player, st.session_state.game_controller.level)
with control_cols[4]:
    if st.button("‚ö°", key="mobile_dash_btn"):
        if st.session_state.game_controller.player.dash():
            st.session_state.player_analyzer.log_action("dash", st.session_state.game_controller.player, st.session_state.game_controller.level)

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
controller = st.session_state.game_controller
controller.update()

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
with game_container.container():
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
    st.write(f"–ó–¥–æ—Ä–æ–≤—å–µ: {controller.player.health} | –ú–æ–Ω–µ—Ç—ã: {controller.player.coins} | –û—á–∫–∏: {controller.score} | –ñ–∏–∑–Ω–∏: {controller.lives}")
    
    # –°—Ç–∞—Ç—É—Å —É—Ä–æ–≤–Ω—è
    if controller.level_completed:
        st.success("üéâ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω! üéâ")
        if st.button("–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å"):
            controller.level_number += 1
            level_data = st.session_state.level_generator.generate_level(controller.current_difficulty)
            level_data["level_id"] = f"level_{controller.level_number}"
            controller.load_level(level_data)
            st.experimental_rerun()
    
    if controller.game_over:
        st.error("üò¢ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! üò¢")
        if st.button("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            controller.initialize_game()
            st.experimental_rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —É—Ä–æ–≤–Ω—è –∏ —Ñ–æ–Ω
    level_type = controller.level.level_type
    background_key = config.LEVEL_TYPES[level_type]["background"]
    
    # –ë–µ—Ä–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if background_key in st.session_state.backgrounds:
        bg_image = st.session_state.backgrounds[background_key]
        bg_base64 = get_image_base64(bg_image.resize((config.SCREEN_WIDTH, config.SCREEN_HEIGHT)))
        game_area_html = f"""
        <div style="position: relative; width: {config.SCREEN_WIDTH}px; height: {config.SCREEN_HEIGHT}px; 
                 border: 2px solid #333; overflow: hidden;">
            <img src="data:image/png;base64,{bg_base64}" 
                 style="position: absolute; left: 0; top: 0; width: 100%; height: 100%; object-fit: cover;">
        """
    else:
        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        game_area_html = f"""
        <div style="position: relative; width: {config.SCREEN_WIDTH}px; height: {config.SCREEN_HEIGHT}px; 
                 border: 2px solid #333; background-color: #87CEEB; overflow: hidden;">
        """
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    platform_color = config.LEVEL_TYPES.get(level_type, {}).get("platform_color", "#228B22")
    for platform in controller.level.platforms:
        platform_color_actual = "#A0522D" if hasattr(platform, 'destructible') and platform.destructible else platform_color
        
        game_area_html += f"""
        <div style="position: absolute; left: {platform.x}px; top: {platform.y}px; 
                   width: {platform.width}px; height: {platform.height}px; 
                   background-color: {platform_color_actual};">
        </div>
        """
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≤—É—à–µ–∫
    for trap in controller.level.traps:
        trap_color = "#FF0000" if trap.is_active() else "#880000"
        game_area_html += f"""
        <div style="position: absolute; left: {trap.x}px; top: {trap.y}px; 
                   width: {trap.width}px; height: {trap.height}px; 
                   background-color: {trap_color};">
        </div>
        """
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    for collectible in controller.level.collectibles:
        if not collectible.is_collected():
            collectible_sprite = st.session_state.sprites.get(collectible.type, None)
            if collectible_sprite:
                collectible_base64 = get_image_base64(collectible_sprite)
                game_area_html += f"""
                <img src="data:image/png;base64,{collectible_base64}" 
                     style="position: absolute; left: {collectible.x}px; top: {collectible.y}px; 
                            width: {collectible.width}px; height: {collectible.height}px;">
                """
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –±–ª–µ—Å–∫–∞ –¥–ª—è –º–æ–Ω–µ—Ç
                if collectible.type == "coin" and hasattr(collectible, 'sparkle_visible') and collectible.sparkle_visible:
                    game_area_html += f"""
                    <div style="position: absolute; left: {collectible.x + 5}px; top: {collectible.y - 5}px; 
                              font-size: 12px; color: yellow;">‚ú®</div>
                    """
            else:
                # –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Å–ø—Ä–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                collectible_color = config.COLLECTIBLE_TYPES.get(collectible.type, {}).get("color", "gold")
                game_area_html += f"""
                <div style="position: absolute; left: {collectible.x}px; top: {collectible.y}px; 
                           width: {collectible.width}px; height: {collectible.height}px; 
                           background-color: {collectible_color}; border-radius: 50%;">
                </div>
                """
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤
    for enemy in controller.level.enemies:
        if enemy.is_alive():
            enemy_sprite = st.session_state.sprites.get(enemy.enemy_type, None)
            if enemy_sprite:
                enemy_base64 = get_image_base64(enemy_sprite)
                game_area_html += f"""
                <img src="data:image/png;base64,{enemy_base64}" 
                     style="position: absolute; left: {enemy.x}px; top: {enemy.y}px; 
                            width: {enemy.width}px; height: {enemy.height}px;">
                """
            else:
                # –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Å–ø—Ä–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                enemy_color = config.ENEMY_TYPES.get(enemy.enemy_type, {}).get("color", "red")
                game_area_html += f"""
                <div style="position: absolute; left: {enemy.x}px; top: {enemy.y}px; 
                           width: {enemy.width}px; height: {enemy.height}px; 
                           background-color: {enemy_color};">
                </div>
                """
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –≤—Ä–∞–≥–æ–≤
            health_percentage = enemy.health / enemy.max_health
            game_area_html += f"""
            <div style="position: absolute; left: {enemy.x}px; top: {enemy.y - 10}px; 
                       width: {enemy.width}px; height: 5px; background-color: #FF0000;">
                <div style="width: {health_percentage * 100}%; height: 100%; background-color: #00FF00;"></div>
            </div>
            """
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∏–ª–µ–π (—Å—Ç—Ä–µ–ª—ã –ª—É—á–Ω–∏–∫–æ–≤ –∏ —Ç.–¥.)
    for enemy in controller.level.enemies:
        if hasattr(enemy, 'projectiles'):
            for projectile in enemy.projectiles:
                game_area_html += f"""
                <div style="position: absolute; left: {projectile['x']}px; top: {projectile['y']}px; 
                          width: {projectile['width']}px; height: {projectile['height']}px; 
                          background-color: yellow; border-radius: 50%;">
                </div>
                """
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    player_sprite = st.session_state.sprites.get("knight", None)
    if player_sprite:
        player_base64 = get_image_base64(player_sprite)
        game_area_html += f"""
        <img src="data:image/png;base64,{player_base64}" 
             style="position: absolute; left: {controller.player.x}px; top: {controller.player.y}px; 
                    width: {controller.player.width}px; height: {controller.player.height}px; 
                    transform: scaleX({1 if controller.player.facing_right else -1});">
        """
    else:
        player_color = "blue"
        if controller.player.invulnerable:
            player_color = "rgba(0, 0, 255, 0.5)"  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–∏–Ω–∏–π –¥–ª—è –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
            
        game_area_html += f"""
        <div style="position: absolute; left: {controller.player.x}px; top: {controller.player.y}px; 
                   width: {controller.player.width}px; height: {controller.player.height}px; 
                   background-color: {player_color};">
        </div>
        """
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞—Ç–∞–∫—É–µ—Ç)
    if controller.player.is_attacking:
        attack_direction = 1 if controller.player.facing_right else -1
        attack_x = controller.player.x + (controller.player.width if attack_direction > 0 else -controller.player.attack_range)
        attack_width = controller.player.attack_range
        
        game_area_html += f"""
        <div style="position: absolute; left: {attack_x}px; top: {controller.player.y}px; 
                   width: {attack_width}px; height: {controller.player.height}px; 
                   background-color: rgba(255, 255, 0, 0.5); border: 1px solid yellow;">
        </div>
        """
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–≤–µ—Ä–µ–π/–≤—ã—Ö–æ–¥–∞ —É—Ä–æ–≤–Ω—è
    game_area_html += f"""
    <div style="position: absolute; left: {controller.level.end_x - 20}px; top: {controller.level.end_y - 40}px; 
               width: 40px; height: 40px; background-color: rgba(0, 255, 0, 0.7); 
               border: 2px solid darkgreen; border-radius: 5px;">
        <div style="text-align: center; margin-top: 5px; font-weight: bold; color: white;">‚öë</div>
    </div>
    """
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π div
    game_area_html += "</div>"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º HTML –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    st.components.v1.html(game_area_html, height=config.SCREEN_HEIGHT + 10)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Ä–æ–≤–Ω—è
    st.markdown("---")
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω—è")
    stats_cols = st.columns(4)
    
    with stats_cols[0]:
        st.write(f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤—Ä–∞–≥–∏: {controller.level.get_remaining_enemies()}")
    with stats_cols[1]:
        st.write(f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–µ–¥–º–µ—Ç—ã: {controller.level.get_remaining_collectibles()}")
    with stats_cols[2]:
        st.write(f"–í—Ä–µ–º—è –Ω–∞ —É—Ä–æ–≤–Ω–µ: {controller.game_time:.1f} —Å")
    with stats_cols[3]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–∏ —É—Ä–æ–≤–Ω—è
        collect_all = controller.level.objectives.get('collect_all', False)
        defeat_all = controller.level.objectives.get('defeat_all', False)
        
        objective_text = "–î–æ–π—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞ —É—Ä–æ–≤–Ω—è"
        if collect_all:
            objective_text += ", —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã"
        if defeat_all:
            objective_text += ", –ø–æ–±–µ–¥–∏—Ç—å –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤"
            
        st.write(f"–¶–µ–ª—å: {objective_text}")
